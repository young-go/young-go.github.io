<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Young的学习记录</title>
  
  <subtitle>Young的学习记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://young-go.github.io/"/>
  <updated>2020-07-16T01:57:25.000Z</updated>
  <id>http://young-go.github.io/</id>
  
  <author>
    <name>Young</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MicroK8s现迎来技术预览版HA功能</title>
    <link href="http://young-go.github.io/2020/07/16/MicroK8s%E7%8E%B0%E8%BF%8E%E6%9D%A5%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%88%E7%89%88HA%E5%8A%9F%E8%83%BD/"/>
    <id>http://young-go.github.io/2020/07/16/MicroK8s%E7%8E%B0%E8%BF%8E%E6%9D%A5%E6%8A%80%E6%9C%AF%E9%A2%84%E8%A7%88%E7%89%88HA%E5%8A%9F%E8%83%BD/</id>
    <published>2020-07-16T01:54:58.000Z</published>
    <updated>2020-07-16T01:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自<a href="https://cn.ubuntu.com/blog/microk8s-ha-tech-preview-is-now-available-2" target="_blank" rel="noopener">https://cn.ubuntu.com/blog/microk8s-ha-tech-preview-is-now-available-2</a></p></blockquote><p>轻量级的Kubernetes <a href="https://microk8s.io/" target="_blank" rel="noopener">MicroK8s</a>现在迎来了高可用（HA）的技术预览版功能，支持Linux、Windows和MacOS。Kubernetes控制面板现在可以分布在多个节点上，使用分布式SQL引擎<a href="https://dqlite.io/" target="_blank" rel="noopener">Dqlite</a>作为Kubernetes数据存储，在为集群带来弹性的同时保持较低的占用空间。<br>在Linux上，你可从技术预览（ha-preview）分支下载和测试MicroK8s的HA功能，命令如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install microk8s --classic --channel&#x3D;latest&#x2F;edge&#x2F;ha-preview</span><br></pre></td></tr></table></figure><p>如果您已经有了MicroK8s，可通过<a href="https://microk8s.io/docs/high-availability" target="_blank" rel="noopener">MicroK8s HA文档</a>了解如何升级至HA通道和设置您的MicroK8s HA集群。</p><p>如您想要在<a href="https://microk8s.io/docs/install-alternatives#heading--windows" target="_blank" rel="noopener">Windows</a>和<a href="https://microk8s.io/docs/install-alternatives#heading--macos" target="_blank" rel="noopener">MacOS</a>上测试HA功能，请按照相应的安装说明进行操作，并在安装完成后运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipass exec microk8s -- sudo snap refresh microk8s --classic --channel&#x3D;latest&#x2F;edge&#x2F;ha-preview</span><br></pre></td></tr></table></figure><p>请注意，HA技术预览版本的HA功能默认是开启的。这意味着在通过HA控制面板将自动添加至少2个节点至集群从而形成3个节点。  </p><p>一旦您添加额外的节点到HA集群，MicroK8s输出状态将会变成下面图示：<br><img src="https://admin.insights.ubuntu.com/wp-content/uploads/46b8/pasted-image-0-4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来自&lt;a href=&quot;https://cn.ubuntu.com/blog/microk8s-ha-tech-preview-is-now-available-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn
      
    
    </summary>
    
    
    
      <category term="Kubernetes" scheme="http://young-go.github.io/tags/Kubernetes/"/>
    
      <category term="MicroK8s" scheme="http://young-go.github.io/tags/MicroK8s/"/>
    
      <category term="Windows" scheme="http://young-go.github.io/tags/Windows/"/>
    
      <category term="MacOS" scheme="http://young-go.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的私人网盘</title>
    <link href="http://young-go.github.io/2020/07/15/%E5%9F%BA%E4%BA%8E%20Ubuntu+nextCloud%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    <id>http://young-go.github.io/2020/07/15/%E5%9F%BA%E4%BA%8E%20Ubuntu+nextCloud%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/</id>
    <published>2020-07-15T11:25:11.000Z</published>
    <updated>2020-07-16T01:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nextCloud简介：</p><p>nextCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘。本教程中，您将学到如何在Ubuntu 上安装 nextCloud。</p></blockquote><blockquote><p>来自：<a href="https://cloud.tencent.com/developer/labs/lab/10287" target="_blank" rel="noopener">https://cloud.tencent.com/developer/labs/lab/10287</a></p></blockquote><h1 id="一-基础设置"><a href="#一-基础设置" class="headerlink" title="一.基础设置"></a>一.基础设置</h1><h2 id="1-切换为-root-账号"><a href="#1-切换为-root-账号" class="headerlink" title="1.切换为 root 账号"></a>1.切换为 root 账号</h2><p>Ubutu 系统默认登录的用户为非 root 权限用户，为了能正常安装 nextCloud，需要切换为 root 账号。执行如下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><h2 id="2-更新及安装基础包"><a href="#2-更新及安装基础包" class="headerlink" title="2.更新及安装基础包"></a>2.更新及安装基础包</h2><p>依次运行如下命令，有遇到询问的<code>Is this ok [y/d/N]</code>的时候直接键入<code>y</code>并回车即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install snap</span><br><span class="line">apt-get install snapd</span><br></pre></td></tr></table></figure><h1 id="二-安装-nextCloud"><a href="#二-安装-nextCloud" class="headerlink" title="二.安装 nextCloud"></a>二.安装 nextCloud</h1><h3 id="进入安装"><a href="#进入安装" class="headerlink" title="进入安装"></a>进入安装</h3><p>运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snap install nextcloud</span><br></pre></td></tr></table></figure><p>国内网络下载有点慢，需要耐心等待。笔者差不多1h 才安装好，建议可以睡个小觉再回来看进度。</p><p>看到如下图则证明安装成功。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/3nwbsft8t0/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%20%E4%B8%8A%E5%8D%881.03.35.png" alt=""></p><h1 id="三-设置-nextCloud"><a href="#三-设置-nextCloud" class="headerlink" title="三.设置 nextCloud"></a>三.设置 nextCloud</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>访问本机ip (http://&lt;您的 CVM IP 地址&gt;/) 即可进入 nextCloud 的安装页面。</p><p>根据个人需求输入用户名创建用户即可。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/zy50tldqop/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%20%E4%B8%8A%E5%8D%881.08.25.png" alt=""></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>创建成功即进入管理界面，与一般的网盘使用上无多大差别，也可以按照提示下载使用移动端 app 管理文件。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/ekznc52az1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%20%E4%B8%8A%E5%8D%881.09.47.png" alt="image"></p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/dp0ec39cnr/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%20%E4%B8%8A%E5%8D%881.11.56.png" alt="image"></p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/5pelfuv82b/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%20%E4%B8%8A%E5%8D%881.12.03.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;nextCloud简介：&lt;/p&gt;
&lt;p&gt;nextCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘。本教程中，您将学到如何在Ubuntu 上安装 nextCloud。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
    
      <category term="网盘" scheme="http://young-go.github.io/tags/%E7%BD%91%E7%9B%98/"/>
    
      <category term="Ubuntu" scheme="http://young-go.github.io/tags/Ubuntu/"/>
    
      <category term="nextCloud" scheme="http://young-go.github.io/tags/nextCloud/"/>
    
  </entry>
  
  <entry>
    <title>Python PyInstaller安装和使用教程（详解版）</title>
    <link href="http://young-go.github.io/2020/07/15/Python%20PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3%E7%89%88%EF%BC%89/"/>
    <id>http://young-go.github.io/2020/07/15/Python%20PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3%E7%89%88%EF%BC%89/</id>
    <published>2020-07-15T08:54:24.000Z</published>
    <updated>2020-07-16T01:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自<a href="http://c.biancheng.net/view/2690.html" target="_blank" rel="noopener">http://c.biancheng.net/view/2690.html</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/07/15/UwUuLD.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;http://c.biancheng.net/view/2690.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://c.biancheng.net/view/2690.html&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://young-go.github.io/categories/Python/"/>
    
    
      <category term="PyInstaller" scheme="http://young-go.github.io/tags/PyInstaller/"/>
    
  </entry>
  
  <entry>
    <title>Python变量笔记</title>
    <link href="http://young-go.github.io/2020/07/15/Python%E5%8F%98%E9%87%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://young-go.github.io/2020/07/15/Python%E5%8F%98%E9%87%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-15T06:54:24.000Z</published>
    <updated>2020-07-15T07:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。<br>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。<br>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。<br>Python变量可以直接赋值<br>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>等号（=）用来给变量赋值。<br>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：<br>counter = 100 # 赋值整型变量<br>miles = 1000.0 # 浮点型<br>name = “John” # 字符串<br>列表用 “[ ]” 标识类似 C 语言中的数组。<br>元组用 “( )” 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br>字典用 “{ }” 标识。字典由索引 key 和它对应的值 value 组成。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。&lt;br&gt;基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。&lt;br&gt;因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。&lt;br&gt;Python变量可以直接赋值&lt;br&gt;每
      
    
    </summary>
    
    
      <category term="Python" scheme="http://young-go.github.io/categories/Python/"/>
    
    
      <category term="Python笔记" scheme="http://young-go.github.io/tags/Python%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何简单地理解Python中的if __name__ == &#39;__main__&#39;</title>
    <link href="http://young-go.github.io/2020/07/15/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E5%9C%B0%E7%90%86%E8%A7%A3Python%E4%B8%AD%E7%9A%84if%20__name__%20==%20&#39;__main__&#39;%20/"/>
    <id>http://young-go.github.io/2020/07/15/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E5%9C%B0%E7%90%86%E8%A7%A3Python%E4%B8%AD%E7%9A%84if%20__name__%20==%20&#39;__main__&#39;%20/</id>
    <published>2020-07-15T06:54:24.000Z</published>
    <updated>2020-07-16T01:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://blog.csdn.net/yjk13703623757/article/details/77918633" target="_blank" rel="noopener">https://blog.csdn.net/yjk13703623757/article/details/77918633</a></p></blockquote><h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h1><p>通俗的理解<strong>name</strong> == ‘<strong>main</strong>‘：假如你叫小明，在朋友眼中，你是小明(<strong>name</strong> == ‘小明’)；在你自己眼中，你是你自己(<strong>name</strong> == ‘<strong>main</strong>‘)。  </p><p>if <strong>name</strong> == ‘<strong>main</strong>‘的意思是：当.py文件被直接运行时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块将被运行；当.py文件以模块形式被导入时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块不被运行。  </p><h1 id="2-程序入口"><a href="#2-程序入口" class="headerlink" title="2. 程序入口"></a>2. 程序入口</h1><p>对于很多编程语言来说，程序都必须要有一个入口，比如C，C++，以及完全面向对象的编程语言Java，C#等。如果你接触过这些语言，对于程序入口这个概念应该很好理解，C，C++都需要有一个main函数作为程序的入口，也就是程序的运行会从main函数开始。同样，Java，C#必须要有一个包含Main方法的主类，作为程序入口。  </p><p>而Python则不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。  </p><p>一个Python源码文件（.py）除了可以被直接运行外，还可以作为模块（也就是库），被其他.py文件导入。不管是直接运行还是被导入，.py文件的最顶层代码都会被运行（Python用缩进来区分代码层次），而当一个.py文件作为模块被导入时，我们可能不希望一部分代码被运行。  </p><h1 id="2-1-一个-py文件被其他-py文件引用"><a href="#2-1-一个-py文件被其他-py文件引用" class="headerlink" title="2.1 一个.py文件被其他.py文件引用"></a>2.1 一个.py文件被其他.py文件引用</h1><p>假设我们有一个const.py文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PI &#x3D; 3.14</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;PI:&quot;, PI)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：PI: 3.14</p></blockquote><p>现在，我们写一个用于计算圆面积的area.py文件，area.py文件需要用到const.py文件中的PI变量。从const.py中，我们把PI变量导入area.py：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from const import PI</span><br><span class="line"></span><br><span class="line">def calc_round_area(radius):</span><br><span class="line">    return PI * (radius ** 2)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;round area: &quot;, calc_round_area(2))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>PI: 3.14<br>round area:12.56</p></blockquote><h2 id="2-2-修改const-py，添加if-name-“main“"><a href="#2-2-修改const-py，添加if-name-“main“" class="headerlink" title="2.2 修改const.py，添加if name == “main“"></a>2.2 修改const.py，添加if <strong>name</strong> == “<strong>main</strong>“</h2><p>我们看到const.py中的main函数也被运行了，实际上我们不希望它被运行，因为const.py提供的main函数只是为了测试常量定义。这时if <strong>name</strong> == ‘<strong>main</strong>‘派上了用场，我们把const.py改一下，添加if <strong>name</strong> == “<strong>main</strong>“：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PI &#x3D; 3.14</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;PI:&quot;, PI)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>运行const.py结果：PI: 3.14<br>运行area.py结果：round area:12.56</p></blockquote><p>如上，我们可以看到if <strong>name</strong> == ‘<strong>main</strong>‘相当于Python模拟的程序入口，Python本身并没有这么规定，这只是一种编码习惯。由于模块之间相互引用，不同模块可能有这样的定义，而程序入口只有一个。到底哪个程序入口被选中，这取决于<strong>name</strong>的值。  </p><h1 id="3-name"><a href="#3-name" class="headerlink" title="3. name"></a>3. <strong>name</strong></h1><h2 id="3-1-name反映一个包的结构"><a href="#3-1-name反映一个包的结构" class="headerlink" title="3.1 name反映一个包的结构"></a>3.1 <strong>name</strong>反映一个包的结构</h2><p><strong>name</strong>是内置变量，可用于反映一个包的结构。假设我们有一个包a，包的结构如下：</p><blockquote><p>a<br>├── b<br>│   ├── c.py<br>│   └── <strong>init</strong>.py<br>└── <strong>init</strong>.py  </p></blockquote><p>在包a中，文件c.py，<strong>init</strong>.py，<strong>init</strong>.py的内容都为：print(<strong>name</strong>)<br>当一个.py文件（模块）被其他.py文件（模块）导入时，我们在命令行执行:python -c”import a.b.c”  </p><blockquote><p>输出结果：<br>a<br>a.b<br>a.b.c</p></blockquote><p>由此可见，<strong>name</strong>可以清晰地反映一个模块在包中的层次。</p><h2 id="3-2-name表示当前模块的名字"><a href="#3-2-name表示当前模块的名字" class="headerlink" title="3.2 name表示当前模块的名字"></a>3.2 <strong>name</strong>表示当前模块的名字</h2><p><strong>name</strong>是内置变量，可用于表示当前模块的名字。我们直接运行一个.py文件（模块）:python a/b/c.py  </p><blockquote><p>输出结果：<strong>main</strong></p></blockquote><p>由此我们可知：如果一个.py文件（模块）被直接运行时，则其没有包结构，其<strong>name</strong>值为<strong>main</strong>，即模块名为<strong>main</strong>。  </p><p>所以，if <strong>name</strong> == ‘<strong>main</strong>‘的意思是：当.py文件被直接运行时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块将被运行；当.py文件以模块形式被导入时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块不被运行。  </p><h1 id="4-main-py文件与python-m"><a href="#4-main-py文件与python-m" class="headerlink" title="4. main.py文件与python -m"></a>4. <strong>main</strong>.py文件与python -m</h1><p>Python的-m参数用于将一个模块或者包作为一个脚本运行，而<strong>main</strong>.py文件相当于是一个包的“入口程序“。</p><h2 id="4-1-运行Python程序的两种方式"><a href="#4-1-运行Python程序的两种方式" class="headerlink" title="4.1 运行Python程序的两种方式"></a>4.1 运行Python程序的两种方式</h2><ul><li>python xxx.py，直接运行xxx.py文件  </li><li>python -m xxx.py，把xxx.py当做模块运行</li></ul><p>假设我们有一个文件 run.py ，内容如下：<br>import sys<br>print(sys.path)  </p><p>我们用直接运行的方式启动:python run.py<br>输出结果(为了说明问题，输出结果只截取了重要部分，下同)：[‘/home/huoty/aboutme/pythonstudy/main’, …]<br>然后以模块的方式运行:python -m run.py<br>输出内容:<br>[‘’, …]<br>/usr/bin/python: No module named run.py  </p><p>由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异：</p><ul><li><p>直接运行方式是把run.py文件所在的目录放到了sys.path属性中  </p></li><li><p>以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了 sys.path 属性中。<br>以模块方式运行还有一个不同的地方：多出了一行No module named run.py的错误。实际上以模块方式运行时，Python先对run.py执行一遍 import，所以print(sys.path)被成功执行，然后Python才尝试运行run.py模块，但是在path变量中并没有run.py这个模块，所以报错。正确的运行方式，应该是python -m run。</p><h2 id="4-2总结一下"><a href="#4-2总结一下" class="headerlink" title="4.2总结一下"></a>4.2总结一下</h2></li><li><p>当加上-m参数时，Python会把当前工作目录添加到sys.path中；而不加-m时，Python则会把脚本所在目录添加到sys.path中。</p></li><li><p>当加上-m参数时，Python会先将模块或者包导入，然后再执行。</p></li><li><p><strong>main</strong>.py文件是一个包或者目录的入口程序。不管是用python package还是用python -m package运行，<strong>main</strong>.py文件总是被执行。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://blog.csdn.net/yjk13703623757/article/details/77918633&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn
      
    
    </summary>
    
    
    
      <category term="Python" scheme="http://young-go.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用hexo和github免费搭建自己的博客1.准备</title>
    <link href="http://young-go.github.io/2020/07/12/%E7%94%A8hexo%E5%92%8Cgithub%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A21-%E5%87%86%E5%A4%87/"/>
    <id>http://young-go.github.io/2020/07/12/%E7%94%A8hexo%E5%92%8Cgithub%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A21-%E5%87%86%E5%A4%87/</id>
    <published>2020-07-12T10:22:24.000Z</published>
    <updated>2020-07-16T01:28:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用hexo和github免费搭建自己的博客-win"><a href="#用hexo和github免费搭建自己的博客-win" class="headerlink" title="用hexo和github免费搭建自己的博客(win)"></a>用hexo和github免费搭建自己的博客(win)</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><h3 id="要准备的有："><a href="#要准备的有：" class="headerlink" title="要准备的有："></a>要准备的有：</h3><ul><li>node.js</li><li>npm(node.js自带了)  </li><li>cmpn</li><li>git</li><li>hexo</li><li>Visual Studio Code(非必须，但是在写博客.md和编写配置文件的时候很有用）</li><li>markdown编辑器（非必须，如果你下载Visual Studio Code那么不用下载了）</li></ul><hr><h3 id="1-node-js-npm-cmpn"><a href="#1-node-js-npm-cmpn" class="headerlink" title="1.node.js/npm/cmpn"></a>1.node.js/npm/cmpn</h3><p>到node.js官网下载（<a href="https://nodejs.org/zh-cn/）" target="_blank" rel="noopener">https://nodejs.org/zh-cn/）</a><br>直接安装12.16.3长期支持版<br><img src="https://s1.ax1x.com/2020/07/12/U8Gqr8.png" alt=""><br>下一步，没什么好说的<br><img src="https://s1.ax1x.com/2020/07/12/U8JEa4.png" alt="">.<br>安装完了之后在（管理员）PowerShell里输入：npm -v和node -v<br>如果没有报错就是成功了<br><img src="https://s1.ax1x.com/2020/07/12/U8JMM6.png" alt=""><br>然后后输入“npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> ”<br>切换到阿里云镜像<br><img src="https://s1.ax1x.com/2020/07/12/U8JGIH.png" alt=""><br>最后安装cmpn“npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> ”<br><img src="https://s1.ax1x.com/2020/07/12/U8Jwsf.png" alt=""></p><hr><h3 id="2-git"><a href="#2-git" class="headerlink" title="2.git"></a>2.git</h3><p>git简介：Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。  </p><p>到<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 下载git<br><img src="https://i.loli.net/2020/05/09/Py9K843YVf2IcZD.png" alt=""><br>安装请直接无脑下一步<br><img src="https://i.loli.net/2020/05/09/YjTx1hqAONwGum8.png" alt=""><br>安装完了时候在桌面右键，打开git终端 </p><blockquote><p>打开git终端：<br>在你要打开git终端的位置右键选择 Git Bash Here<br><img src="https://i.loli.net/2020/05/11/iBOpJoab51XsqCW.png" alt=""><br><img src="https://i.loli.net/2020/05/09/PrsoeW2TZ8nU6C3.png" alt=""><br>然后在图标上选择右键，选择Options，然后选择window，在UI language这里选择或输入zh_CN,最后点击Save  把界面调整成中文。<br><img src="https://i.loli.net/2020/05/09/rfRXtwgDUcG5MFy.png" alt=""></p></blockquote><hr><h3 id="3-hexo"><a href="#3-hexo" class="headerlink" title="3.hexo"></a>3.hexo</h3><p>选择一个存放你博客的文件夹，我选择C:\Users\young\Documents\boke<br>右键打开git终端<br>输入:“npm i hexo-cli -g”和”npm i hexo-deployer-git”<br>安装完后输入hexo -v验证是否安装成功。<br><img src="https://i.loli.net/2020/05/11/ouxIrYSTPphtVDs.png" alt=""><br>ps:可能会报错，那么hexo -v没有问题那么请无视  </p><hr><h3 id="4-Visual-Studio-Code-非必须，但是在写博客-md和编写配置文件的时候很有用）"><a href="#4-Visual-Studio-Code-非必须，但是在写博客-md和编写配置文件的时候很有用）" class="headerlink" title="4.Visual Studio Code(非必须，但是在写博客.md和编写配置文件的时候很有用）"></a>4.Visual Studio Code(非必须，但是在写博客.md和编写配置文件的时候很有用）</h3><p>去Visual Studio Code官网：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a><br><img src="https://i.loli.net/2020/05/11/5ceznbGaHV72DFp.png" alt=""><br>安装：<br><img src="https://i.loli.net/2020/05/11/pLx8u5cywHOhJI6.png" alt=""><br><img src="https://i.loli.net/2020/05/11/MkFIEsWhdKeVNwO.png" alt=""><br><img src="https://i.loli.net/2020/05/11/TfLM6qiyj4kPuVw.png" alt=""><br><img src="https://i.loli.net/2020/05/11/6MWJdELVRhYA2vU.png" alt=""><br><img src="https://i.loli.net/2020/05/11/9z4a6mKCW8MhepS.png" alt=""><br><img src="https://i.loli.net/2020/05/11/Pp87SDjJCAuvIxE.png" alt=""><br><img src="https://i.loli.net/2020/05/11/8cehGorPx76R3kZ.png" alt=""><br>打开Visual Studio Code，安装中文插件<br><img src="https://i.loli.net/2020/05/11/7ckRhZqKuoeBvlW.png" alt=""><br>按下contrul+shift+p，输入config，选择第一个<br><img src="https://i.loli.net/2020/05/11/ROvFPmMX2lHBgIn.png" alt=""><br>选择zh-CN<br><img src="https://i.loli.net/2020/05/11/oh4eu6NEdYWrVOR.png" alt=""><br>重启<br><img src="https://i.loli.net/2020/05/11/msCkzn6KGgcOY8u.png" alt=""></p><h3 id="5-markdown编辑器"><a href="#5-markdown编辑器" class="headerlink" title="5.markdown编辑器"></a>5.markdown编辑器</h3><p>请百度<br><img src="https://i.loli.net/2020/05/11/RBDKQqYOTvzf3tp.png" alt="">  </p><hr><p>未完待续….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用hexo和github免费搭建自己的博客-win&quot;&gt;&lt;a href=&quot;#用hexo和github免费搭建自己的博客-win&quot; class=&quot;headerlink&quot; title=&quot;用hexo和github免费搭建自己的博客(win)&quot;&gt;&lt;/a&gt;用hexo和gith
      
    
    </summary>
    
    
      <category term="用hexo和github免费搭建自己的博客" scheme="http://young-go.github.io/categories/%E7%94%A8hexo%E5%92%8Cgithub%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://young-go.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="http://young-go.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
